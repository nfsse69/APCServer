#-*- mode:python -*-
'''
APCServer: Server that is plugged into the USB/serial cable
   for an APC UPS.
Usage:
    APCServer -h|--help -w|--windows -l|--linux
    --help: prints this message.
    --windows: runs this as a windows client
    --linux: runs this as a linux client
'''

#Need to do some sed'ing at build time
LIBDIR="../../lib"

import os
import sys
import os.path
import getopt
import socket

sys.path.append(LIBDIR)
import apc_utils
import time

def get_state():
    """
    get_state
    Server will parse the output of apcaccess. Based on the output of it, the server defines the following states:
    1) Battery is greater than 75%
    2) Battery is between 30 and 75%
    3) Battery is between 10 and 30%
    4) Battery is less than 10%
    5) Est Bat runtime is less than 5 Mins.

    If state 5 happens at anytime, shutdown will be signaled.
    """
    battery_left=apc_utils.get_bat_left()
    run_time=apc_utils.get_runtime()
    print run_time
    if run_time > 10:
        if battery_left < 10.0:
            state=4
        if battery_left >= 10 and battery_left <=30:
            state=3
        if battery_left > 30 and battery_left <=75:
            state=2
        if battery_left > 75:
            state=1
    else:
        state=5
    return state

def start_server():
    """
    start_server: the actual daemon
    If in state 1: Server polls UPS every 30 seconds.
    If in state 2: Server polls UPS every 10 seconds.
    If in state 3: Server polls UPS every 5 seconds.
    If in state 4: Server trips shutdowns
    """
    print "Starting APCServer with a pid of: ", pid
    state=get_state()
    if state == 5:
        print "APC Battery is close to death. Exiting."
        state=apc_utils.state_status_4
######################################################
#            SIGNAL SHUTDOWN
######################################################
        sys.exit(1)
    #infinite loop. Will be killed by system stuff
    while 1:
        if state == 1:
            sleep = 30
            status=apc_utils.state_status_1
        if state == 2:
            sleep = 10
            status=apc_utils.state_status_2
        if state == 3:
            sleep = 5
            status=apc_utils.state_status_3
        if state == 4:
            sleep = 10
            status=apc_utils.state_status_4
########################################################
#          SEND DATA OVER SOCKET
########################################################
        print "Sleeping for: ", sleep
        time.sleep(sleep)

def Usage():
    #Use DOC string for usage message.
    print __doc__

#######Main########
start_dir=os.getcwd()
pid= os.getpid()
op_sys_set=1

try:
    opts, args = getopt.getopt(sys.argv[1:], "wlh" ,["windows","linux","help"])
    for o, a in opts:
        if o in ("-h", "--help"):
            Usage()
            sys.exit(2)
        elif o in ("-w", "--windows"):
            op_sys = "windows"
            op_sys_set+=1
        elif o in ("-l", "--linux"):
            op_sys = "linux"
            op_sys_set+=1
        else:
            print "Invalid Usage"
            Usage()
            sys.exit(2)
            
    if op_sys_set > 2:
        print "windows and linux options are mutually exclusive"
        Usage()
        sys.exit(2)
    
except getopt.GetoptError, err:
    print err
    Usage()
    sys.exit(1)
except Exception, e:
    print e
    sys.exit(2)
    
try:
    #Need to flesh out what to do here, if needed.
    if op_sys == "linux":
        print "Run in Linux Mode"
        #import linux.py
    elif op_sys == "windows":
        print "Run in Windows Mode"
except NameError, e:
    print "Operating system not selected. Exiting"
    sys.exit(1)

start_server()

battery_left=apc_utils.get_bat_left()
#print battery_left

if battery_left < 101:
    print "It works"
